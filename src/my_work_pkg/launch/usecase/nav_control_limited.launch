<?xml version="1.0"?>

<launch>
  
  <!-- Launch elevation mapping node. Maps for move_base -->
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find my_work_pkg)/robots/jackal_robot_after_rescue_robotics.yaml" />
    <!-- "$(find rescue_jackal)/config/elevation_mapping/jackal_robot.yaml"
         "$(find my_work_pkg)/robots/jackal_robot_after_rescue_robotics.yaml" -->
    <!-- sensor_processors is defined in robot.yaml under inpud_sources instead
    <rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/perfect.yaml" /> -->
    <rosparam command="load" file="$(find my_work_pkg)/config_elevationMap/myGridmapFilters_postprocessing_limitMap.yaml" />
    <!-- "$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml" -->
  </node>
  
  <!-- Publish tf 'base_footprint' as pose. -->
  <node pkg="elevation_mapping_demos" type="tf_to_pose_publisher.py" name="elevation_mapping_pose_publisher">
    <param name="from_frame" type="string" value="odom" /> <!-- odom or map -->
    <param name="to_frame"   type="string" value="base_link" />
  </node>
  
  <!-- Load visualisation and conversion of grid map to occupancy grid for move_base. -->
  <node pkg="grid_map_visualization" type="grid_map_visualization" name="elevation_map_fused_visualization" output="screen">
    <param name="grid_map_topic" value="/elevation_mapping/elevation_map" />
    <rosparam command="load" file="$(find my_work_pkg)/config_elevationMap/visualize_fused.yaml" />
  </node>
  <node pkg="grid_map_visualization" type="grid_map_visualization" name="elevation_map_raw_visualization" output="screen">
    <param name="grid_map_topic" value="/elevation_mapping/elevation_map_raw" />
    <rosparam command="load" file="$(find my_work_pkg)/config_elevationMap/visualize_raw.yaml" />
    <remap from="/elevation_map_raw_visualization/traversability_grid" to="/map"/>  <!-- remapped for move_base that listens to map topic-->
  </node>


  <!--- Run AMCL. modified from $(find jackal_navigation)/launch/include/amcl.launch 
  ISSUE: amcl ignores the origin of the map given to it. Therefore a robot centric map in the odom cannot be used as it moves with the robot and is not fixed at the zero position.
  
  <include file="$(find my_work_pkg)/launch/usecase/amcl_node.launch"> -->
    <!--- <arg name="use_map_topic" value="true" />
    use scan_topic from pointcloud_to_laserscan 
    <arg name="scan_topic" value="/front/scan/" />
    <arg name="global_frame_id" value="map" /> -->
    <!--- 
    Frame_id of map received:'odom' doesn't match global_frame_id:'map'. This could cause issues with reading published topics => jerky movement and goal pos moves away from robot as it moves
    ==>   change global_frame_id from map to odom 
    	=> Error:   TF_SELF_TRANSFORM: Ignoring transform from authority "unknown_publisher" with frame_id and child_frame_id  "odom" because they are the same
    OR  change elevation_mapping from odom to map
    	=> No elevation map produced
    	=> Timed out waiting for transform from base_link to map to become available before running costmap, tf error: canTransform: target_frame map does not exist.. canTransform returned after 0.1 timeout was 0.1.
    	=> Could not get pose information from robot for time 673.373000. Buffer empty?

    <remap from="map" to="/elevation_map_raw_visualization/traversability_grid"/>
    -->
  <!--- </include> -->

  <!--- static tf from map(for move_base) -> odom(frame of elevation_mapping). Couteracts issue of move_base: Timed out waiting for transform from base_link to map to become available before running costmap, tf error: canTransform: target_frame map does not exist -->
  <node pkg="tf" type="static_transform_publisher" name="ZeroOdomMap" args="0 0 0 0 0 0 /map /odom 200" />

  <!--- Run Move Base -->
  <include file="$(find my_work_pkg)/launch/usecase/move_base_node.launch" >
    <arg name="control_output" default="cmd_vel_uncapped" />
  </include>
  
  <!--- Run node to cap control output from cmd_vel_uncapped -->
  <node pkg="my_work_pkg" type="control_output_cap.py" name="control_output_cap" output="screen">
    <param name="control_input"   type="string" value="cmd_vel_uncapped" />
    <param name="control_output"  type="string" value="cmd_vel" />
  </node>

</launch>
