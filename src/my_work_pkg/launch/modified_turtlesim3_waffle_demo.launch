<?xml version="1.0" encoding="utf-8"?>

<launch>
  <!-- Start position of waffle robot in scene. -->
  <arg name="x_pos" default="-3.0"/>
  <arg name="y_pos" default="1.0"/>
  <arg name="z_pos" default="0.0"/>

  <!-- Start gazebo server with turtlebot3_house scene. -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--<arg name="world_name"    value="./myWork/simpleWorld_ramps (copy).sdf"/> -->
    <!--<arg name="world_name"    value="/home/max-ole/Desktop/catkin_Jackal_ws/myWork/simpleWorld_ramps3.world"/> -->
    <arg name="world_name"    value="$(find my_work_pkg)/worlds/simpleWorld3.world"/>
    <arg name="paused"        value="false"/>
    <arg name="use_sim_time"  value="true"/>
    <arg name="gui"           value="true"/>
    <arg name="headless"      value="false"/>
    <arg name="debug"         value="false"/>
  </include>

  <!-- Load robot_description param for tf, rviz and gazebo spawn. -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find jackal_description)/urdf/jackal_all.urdf.xacro" />
  <!-- <param name="robot_description" textfile="$(find jackal_description)/urdf/jackal.urdf" /> -->

  <!-- Spawn turtlebot into gazebo based on robot_description. -->
  <!-- <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model turtlebot3 -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" /> -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model jackal -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />


  <!-- Publish turtlebot3 tf's. -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

  <!-- start turtlebot3_teleop, keyboard controller 
  <include file="$(find turtlebot3_teleop)/launch/turtlebot3_teleop_key.launch">
  </include>-->

  <!-- Publish tf 'base_footprint' as pose.-->
  <node pkg="elevation_mapping_demos" type="tf_to_pose_publisher.py" name="robot_pose_publisher">
    <param name="from_frame" type="string" value="odom" />
    <param name="to_frame"   type="string" value="base_footprint" />
  </node>

  <!-- Launch elevation mapping node. -->
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/waffle_robot.yaml" />
    <rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/perfect.yaml" />
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml" />
  </node>

  <!-- Launch RViz with the demo configuration. -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find elevation_mapping_demos)/rviz/turtlebot3_waffle_demo.rviz" /> -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find my_work_pkg)/rviz/myRVIZconfiguration_inpaintedRawElevation.rviz" />

</launch>
